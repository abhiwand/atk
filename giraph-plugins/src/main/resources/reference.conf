intel.analytics.component.archives {
  giraph-plugins {
    config-path = "intel.analytics.giraph-plugins"
  }
}

intel.analytics.giraph-plugins {
  extra-classpath = [${intel.analytics.engine.hbase.configuration.path}, ${intel.analytics.engine.hadoop.configuration.path}]
  command {
    available = ["graphs.ml.loopy_belief_propagation",
      "graphs.ml.alternating_least_squares",
      "graphs.ml.conjugate_gradient_descent",
      "frames.label_propagation",
      "models.lda_model_new",
      "models.lda_model_train",
      "graphs.page_rank", "graphs.connected_components"]

    frames {
      label_propagation {
        class = "com.intel.intelanalytics.algorithm.frames.LabelPropagationPlugin"
        config {
          fs = ${intel.analytics.engine.fs}
          default-timeout = ${intel.analytics.engine.default-timeout}
          giraph = ${intel.analytics.engine.giraph}
          titan = ${intel.analytics.engine.titan}
          output {
            dir = "lp"
            overwrite = "true"
          }
        }
      }
    }

    graphs {
      ml {
        loopy_belief_propagation {
          class = "com.intel.intelanalytics.algorithm.graph.LoopyBeliefPropagationPlugin"
          config {
            fs = ${intel.analytics.engine.fs}
            default-timeout = ${intel.analytics.engine.default-timeout}
            giraph = ${intel.analytics.engine.giraph}
            titan = ${intel.analytics.engine.titan}
            output {
              dir = "lbp"
              overwrite = "true"
            }
            giraph {
              lbp.maxSupersteps = 10
              lbp.convergenceThreshold = 0
              lbp.anchorThreshold = 0.9
              lbp.bidirectionalCheck = false
              lbp.power = 0.5
              lbp.smoothing = 2.0
              lbp.ignoreVertexType = false
            }
          }
        }

        alternating_least_squares {
          class = "com.intel.intelanalytics.algorithm.graph.AlternatingLeastSquaresPLugin"
          config {
            fs = ${intel.analytics.engine.fs}
            default-timeout = ${intel.analytics.engine.default-timeout}
            giraph = ${intel.analytics.engine.giraph}
            titan = ${intel.analytics.engine.titan}
            output {
              dir = "als"
              overwrite = "true"
            }
            giraph {
              als.maxSupersteps = 20
              als.convergenceThreshold = 0
              als.lambda = 0.065f
              als.featureDimension = 3
              als.learningCurveOutputInterval = 1
              als.bidirectionalCheck = false
              als.biasOn = false
              als.maxVal = "Infinity"
              als.minVal = "-Infinity"
            }
          }
        }

        conjugate_gradient_descent {
          class = "com.intel.intelanalytics.algorithm.graph.ConjugateGradientDescentPlugin"
          config {
            fs = ${intel.analytics.engine.fs}
            default-timeout = ${intel.analytics.engine.default-timeout}
            giraph = ${intel.analytics.engine.giraph}
            titan = ${intel.analytics.engine.titan}
            output {
              dir = "cgd"
              overwrite = "true"
            }
            giraph {
              cgd.maxSupersteps = 20
              cgd.convergenceThreshold = 0
              cgd.lambda = 0.065f
              cgd.featureDimension = 3
              cgd.learningCurveOutputInterval = 1
              cgd.bidirectionalCheck = false
              cgd.biasOn = false
              cgd.maxVal = "Infinity"
              cgd.minVal = "-Infinity"
              cgd.numCGDIters = 5
            }
          }
        }

      }


      // non ml graph algorithms go down here
      connected_components {
        class = "com.intel.intelanalytics.algorithm.graph.ConnectedComponentsPlugin"
        config {
          fs = ${intel.analytics.engine.fs}
          default-timeout = ${intel.analytics.engine.default-timeout}
          giraph = ${intel.analytics.engine.giraph}
          titan = ${intel.analytics.engine.titan}
          output {
            dir = "connectedcomponents"
            overwrite = "true"
          }
          giraph {
            cc.convergenceProgressOutputInterval = 1
          }
        }
      }

      page_rank {
        class = "com.intel.intelanalytics.algorithm.graph.PageRankPlugin"
        config {
          fs = ${intel.analytics.engine.fs}
          default-timeout = ${intel.analytics.engine.default-timeout}
          giraph = ${intel.analytics.engine.giraph}
          titan = ${intel.analytics.engine.titan}
          output {
            dir = "pr"
            overwrite = "true"
          }
          giraph {
            pr.maxSupersteps = 20
            pr.convergenceThreshold = 0.001
            pr.resetProbability = 0.15
            pr.convergenceProgressOutputInterval = 1
          }
        }
      }

    }

    models {
      lda_model_new {
        class = "com.intel.intelanalytics.algorithm.model.LdaNewPlugin"
        config {
          // TODO: change plugin loading so dummy config won't be needed
          dummy = "dummy"
        }
      }

      lda_model_train {
        class = "com.intel.intelanalytics.algorithm.model.LdaTrainPlugin"
        config {
          fs = ${intel.analytics.engine.fs}
          giraph = ${intel.analytics.engine.giraph}
          output {
            dir = "lda"
            overwrite = "true"
          }
        }
      }

    }
  }
  queries {
    available = []
  }
}


#included so that conf file can be read during unit tests,
#these will not be used when the application is actually running
intel.analytics.engine {
  default-timeout = 30
  titan {}
}
