To compile the project and create the sample jars do
 mvn package
you should see a example-plugins.jar in the target directory.

The hello world plugin will add a method to a frame reference that prints hello world.
The word-count plugin will add a method to a frame reference that counts words in the frame.
The vertex-degree count plugin will add a method to a graph reference that counts the vertex out-degree.


Installing plugins:

To add the plugins to your current installation of intel analytics copy the example-plugins.jar to
/usr/lib/trustedanalytics/lib/

Update the IA configuration file to load your plugin. Open /etc/trustedanalytics/rest-server/application.conf.
The top of the file should look similar to this:

# BEGIN REQUIRED SETTINGS

trustedanalytics.atk {
    #bind address - change to 0.0.0.0 to listen on all interfaces
    //api.host = "127.0.0.1"

    #bind port
    //api.port = 9099

    # The host name for the Postgresql database in which the metadata will be stored
    //metastore.connection-postgresql.host = "invalid-postgresql-host"
    //metastore.connection-postgresql.port = 5432
    //metastore.connection-postgresql.database = "ia-metastore"
    //metastore.connection-postgresql.username = "iauser"
    //metastore.connection-postgresql.password = "myPassword"
    metastore.connection-postgresql.url = "jdbc:postgresql://"${trustedanalytics.atk.metastore.connection-postgresql.host}":"${trustedanalytics.atk.metastore.connection-postgresql.port}"/"${trustedanalytics.atk.metastore.connection-postgresql.database}

    # This allows for the use of postgres for a metastore. Service restarts will not affect the data stored in postgres
    metastore.connection = ${trustedanalytics.atk.metastore.connection-postgresql}

    # This allows the use of an in memory data store. Restarting the rest server will create a fresh database and any
    # data in the h2 DB will be lost
    //metastore.connection = ${trustedanalytics.atk.metastore.connection-h2}

    engine {

        # The hdfs URL where the intelanalytics folder will be created
        # and which will be used as the starting point for any relative URLs
        fs.root = "hdfs://invalid-fsroot-host/user/iauser"

        # The (comma separated, no spaces) Zookeeper hosts that
        # Comma separated list of host names with zookeeper role assigned
        titan.load.storage.hostname = "invalid-titan-host"
        # Zookeeper client port, defaults to 2181
        //titan.load.storage.port = "2181"

        # The URL for connecting to the Spark master server
        spark.master = "spark://invalid-spark-master:7077"

        spark.conf.properties {
            # Memory should be same or lower than what is listed as available in Cloudera Manager.
            # Values should generally be in gigabytes, e.g. "8g"
            spark.executor.memory = "invalid executor memory"
        }
    }

}

Inside the "engine {" tag add the following text.

"
plugin {
      command {
        #List of archives to scan for command plugins
        archives = ["engine-core", "giraph-plugins", "frame-plugins", "graph-plugins", "model-plugins", "example-plugins"]
      }
    }
"

Now restart the intel analytics service and try the code example below.

sudo service trustedanalytics restart


Sample code:

from trustedanalytics import *

#the default home directory is  hdfs://user/iauser all the sample data sets are saved to hdfs://user/iauser/datasets
dataset = r"datasets/movie_data_random.csv"

#csv schema definition
schema = [("user_id", int32),
          ("movie_id", int32),
          ("rating", int32),
          ("splits", str)]

csv_file = CsvFile(dataset, schema, skip_header_lines=1)

print "Building data frame"

frame = BigFrame(csv_file)

print "View auto-generated Python documentation for plugin"
help(frame.helloworld)

print "Run hello-world plugin"
frame.helloworld()
>>u'Frame says Hello World'

frame.helloworld("test")
>> u'Frame says test'

More examples are available in the python-examples folder.


PROXY
To use maven inside the corporate network you need to have maven proxy settings. I have included maven
 configuration file called "settings.xml" with the jones farm proxy settings. You will most likely have to update it with your
 local proxy configurations. The "settings.xml" file should be copied to ~/.m2 directory so maven can use it.