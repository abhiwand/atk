#!/bin/bash

## The primary purpose of this script file is to allow the Sphinx-Build program
# to build in python 2.7 on a RedHat distribution of Linux. RedHat needs
# version 2.6 to run properly, so we create a virtual environment with
# python 2.7 in the PYTHONPATH when we create the documents.

# Subroutines:

############################################################################################################
function check_environment {
# debug: Running on Ubuntu, we do not need virtpy because Ubuntu is awesome!
    UBUNTU_OS=$(cat /etc/*-release | grep -i ubuntu)

    if [ "$UBUNTU_OS" == "" ]; then
        
        # This is not Ubuntu, so look for a virtual environment
        if [[ -f /usr/lib/IntelAnalytics/virtpy/bin/activate ]]; then
            ACTIVATE_FILE=/usr/lib/IntelAnalytics/virtpy/bin/activate
        else
            ACTIVATE_FILE=/usr/local/virtpy/bin/activate
        fi
        
        if [[ -f $ACTIVATE_FILE ]]; then
            source $ACTIVATE_FILE > /dev/null
        else
            return 1
        fi
    fi
    echo $LOGNAME
    return 0
}
############################################################################################################
function delete_previous {
    # $1 = Directory
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = Temporary file
    # $5 = LogFile

    CommandLine="rm -rf $1"
    if [ -d $1 ]; then
        log_step "$CommandLine" $3 $5
        $CommandLine > $4
        if [ "$?" == "1" ]; then
            Err "$CommandLine" $2 $3 $4 $5
            if [ "$?" == "1" ]; then
                return 1
            fi
        else
            rm $4
        fi
    fi
    return 0
}
############################################################################################################
function do_this {
    # $1 = RunCommand
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = TempFile
    # $5 = LogFile

    log_step "$1" $3 $5
    ($1) > $4 2>&1
    if [ "$?" == "1" ]; then
        Err "$1" $2 $3 $4 $5
        return $?
    else
        rm $4 > /dev/null
    fi
    return 0
}
############################################################################################################
function doc_help {
    echo
    echo "$0 $1"
    echo
    echo "-h, --help: Print this and return"
    echo "-e:         Do not erase previous compilation"
    echo "+e:         Erase doctrees"
    if [ "$UBUNTU_OS" == "" ]; then
        echo "-f, --force:Attempt compile without virtual environment"
    fi
    echo "-q, -qq:    Quiet mode, use default values for prompts"
    echo "-s:         Do not compile Scala code"
    echo
    echo "html:       Compile to html"
    echo "latex:      Compile to LaTeX"
    echo "pdf:        Compile to pdf"
    echo "text:       Compile to text"
    echo "zip:        Do a zip of build directory"
    echo "packages:   Check for installed packages"
    echo
    echo "By default, file builds will erase previous files first. For example,"
    echo "if html is called for, this will delete the existing html files first."
    echo "Flags and options listed above have ':' symbol for clarification purposes only,"
    echo "they are not part of the flag/option and should not be used on the command line."
    echo
    return 0
}
############################################################################################################
function Err {
    # $1 = Failure description, usually the command line
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = TempFile
    # $5 = LogFile

    if [[ -e "$4" ]]; then
        cat "$4" >> $5
        rm "$4"
    fi
    if [ "$3" == "Yes" ]; then
        echo "Failure: $1"
    fi
    if [ "$2" == "Yes" ]; then
        read -p "View .log file? [Y/n] " UserResponse
        if [ -z $UserResponse ];then
            UserResponse='y'
        fi
        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
            less $LogFile
        fi
        read -p "Abort? [Y/n] " UserResponse
        if [ -z $UserResponse ];then
            UserResponse='y'
        fi
        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
            return 1
        fi
    else
        return 1
    fi
    return 0
}
############################################################################################################
function log_step {
    # $1 = step description, usually the full command
    # $2 = DisplayStatus
    # $3 = LogFile

    if [ "$2" == "Yes" ]; then
        echo "$1"
    fi
    echo >> $3
    echo >> $3
    echo "$1" >> $3
    return 0
}
############################################################################################################
function main {
    # debug: $1 = Modified Arguments

    echo

    ModifiedArguments=$1
    ScriptPath=$(dirname "$(readlink -f "$0")")
    LogFile=$ScriptPath/doc.log; if [ -e $LogFile ]; then rm $LogFile; fi
    TempFile=$ScriptPath/temp.txt; if [ -e $TempFile ]; then rm $TempFile; fi

    # debug: Start the log file
    echo "doc run", $(date +%Y%m%d.%H%M), $ModifiedArguments > $LogFile

    # debug: Sometimes numpy chokes on these files.
    if [[ -f ../core/*.pyc ]]; then rm ../core/*.pyc; fi

    # debug: Check on quiet mode
    echo $ModifiedArguments | grep -i -e "/-q/" -e "/-qq/" > /dev/null
    if [ $? == 0 ]; then
        AskThem=No
    else
        AskThem=Yes
    fi

    # debug: Check on super quiet mode
    echo $ModifiedArguments | grep -i -e "/-qq/" > /dev/null
    if [ $? == 0 ]; then
         DisplayStatus=No
    else
         DisplayStatus=Yes
    fi

    # debug: Look for help
    echo $ModifiedArguments | grep -i -e "/-h/" -e "/--help/" > /dev/null
    if [ $? == 0 ]; then
        doc_help $ModifiedArguments
        return 0
    fi

    # debug: Look for a virtual environment if needed
#    echo $ModifiedArguments | grep -i -e "/-f/" -e "/--force/" > /dev/null
#    if [ $? == 1 ]; then
        # debug: about to check the environment
        USERNAME=$(check_environment)
#        if [ "$?" == "1" ]; then
#            echo "Virtual Environment is not installed."
#            echo "Please execute install_pyenv.sh to install."
#            echo "or use the -f/--force flag."
#            return 1
#        fi
#    else
#        # debug: setting USERNAME=$LOGNAME
#        USERNAME=$LOGNAME
#    fi

    # debug: Look for packages if the individual is a techwriter
    echo $ModifiedArguments | grep -i "/packages/" > /dev/null
    if [[ "$?" == "0" && "$USERNAME" != "" ]]; then
        packages $USERNAME $ScriptPath
    fi

    # debug: Look for buildable
    echo $ModifiedArguments | grep -i -e "/pdf/" > /dev/null
    if [ "$?" == "0" ]; then
        echo $ModifiedArguments | grep -i -e "/latex/" > /dev/null
        if [ "$?" == "1" ]; then
            ModifiedArguments="$ModifiedArguments+/latex/"
        fi
    fi
    echo $ModifiedArguments | grep -i -e "/latex/" -e "/pdf/" -e "/text/" -e "/html/" > /dev/null
    if [ "$?" == "0" ]; then

        # debug: Remove previous doctrees
        echo $ModifiedArguments | grep -i "/+e/" > /dev/null
        if [ "$?" == "0" ]; then
            delete_previous "build/doctrees" $AskThem $DisplayStatus $TempFile $LogFile
            if [ "$?" == "1" ]; then return 1; fi
        fi

        # debug: Check for rebuilding the scala routines
        echo $ModifiedArguments | grep -i "/-s/" > /dev/null
        if [ "$?" == "1" ]; then

            # debug: Update scala server
            pushd ../ > /dev/null
            update_scala $AskThem $DisplayStatus $TempFile $LogFile
            if [ "$?" != "0" ]; then popd; return 1; fi

            # debug: Update the additional python documentation files
            cd python
            update_python $AskThem $DisplayStatus $TempFile $LogFile
            if [ "$?" == "1" ]; then popd; return 1; fi

            # debug: Return to original directory to continue
            popd > /dev/null
        fi

        # debug: Look for sphinx build types
        SphinxFormats="latex text html"
        SphinxFlag=OK
        for Format in $SphinxFormats
        do
            if [ "$SphinxFlag" == "OK" ]; then
                echo $ModifiedArguments | grep -i -e "/$Format/" > /dev/null
                if [ "$?" == "0" ]; then
                    which sphinx-build > /dev/null
                    if [ "$?" == "0" ]; then
                        sphinx_build "$Format" $AskThem $DisplayStatus $TempFile $LogFile $ModifiedArguments
                        if [ "$?" == "1" ]; then return 1; fi
                    else
                        echo "The sphinx documentation system does not seem to be present."
                        read -p "Abort? [Y/n] "
                        if [ -z $UserResponse ];then
                            UserResponse='y'
                        fi
                        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
                            return 1
                        fi
                        SphinxFlag=No
                    fi
                fi
            fi
        done

        # debug: Look for pdf building
        echo $ModifiedArguments | grep -i -e "/pdf/" > /dev/null
        if [ $? == 0 ]; then
            which pdflatex > /dev/null
            if [ "$?" == "0" ]; then
                pdf_build latex IntelAnalytics $AskThem $DisplayStatus $TempFile $LogFile
                if [ "$?" == "1" ]; then return 1; fi
                if [[ -f build/latex/IntelAnalytics.pdf && -d build/html/_downloads ]]; then
                    RunCommand="cp build/latex/IntelAnalytics.pdf build/html/_downloads/"
                    do_this "$RunCommand" $AskThem $DisplayStatus $TempFile $LogFile
                    if [ "$?" == "1" ]; then return 1; fi
                fi
            else
                echo "The latex to pdf convert does not seem to be present."
                read -p "Abort? [Y/n] "
                if [ -z $UserResponse ];then
                    UserResponse='y'
                fi
                if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
                    return 1
                fi
            fi
        fi
    fi

    # debug: Compress the results into a single file
    echo $ModifiedArguments | grep -i -e "/zip/" > /dev/null
    if [ $? == 0 ]; then
        which pdflatex > /dev/null
        if [ "$?" == "0" ]; then
            if [[ -e intel_analytics_docs.zip ]]; then
                rm intel_analytics_docs.zip
            fi
            
            RunCommand="zip -q -9 -r intel_analytics_docs build"
            do_this "$RunCommand" $AskThem $DisplayStatus $TempFile $LogFile
        else
            echo "The zip utility does not seem to be present."
            read -p "Abort? [Y/n] "
            if [ -z $UserResponse ];then
                UserResponse='y'
            fi
            if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
                return 1
            fi
        fi
    fi
    if [ -e doc.log ]; then
        rm doc.log
    fi
}
############################################################################################################
function packages {
    # $1 = User id name
    # $2 = ScriptPath

    # Give the filename of the list of people with ability to load python packages
    TECHWRITERS=techwriters
    # Yes for "packages", check for permissions
    if [ -f $2/$TECHWRITERS ]; then
        echo $1 | grep -f $2/$TECHWRITERS > /dev/null
        if [ $? == 0 ]; then
            echo Checking the installed packages.
            # The packages need superuser rights to install properly.
            sudo -E $2/install_packages.sh
        fi
    fi
    return 0
}
############################################################################################################
function parameters {
    e=""
    for p in $1
    do
        e=$e"/"$p
    done
    if [ "$e" != "" ]; then e=$e"/"; fi
    echo "$e"
}
############################################################################################################
function pdf_build {
    # $1 = Source Format
    # $2 = Source Document(s)
    # $3 = AskThem
    # $4 = DisplayStatus
    # $5 = Temporary file
    # $6 = LogFile

    # Build a pdf from another source, currently limited to latex

    BuildDirectory="build/$1"
    Extension="tex"

    log_step "Checking file $BuildDirectory/$2.$Extension" $4 $6
    if [[ -f "$BuildDirectory/$2.$Extension" ]]; then
        pushd $BuildDirectory > /dev/null
        RunCommand="pdflatex -interaction=scrollmode \"$2.$Extension\""
        $RunCommand > /dev/null # Ignore errors, hope they go away
        $RunCommand > /dev/null # Ignore errors, hope they go away
        $RunCommand > /dev/null # Ignore errors, hope they go away

        RunCommand="makeindex -s python.ist $2.idx"
        do_this "$RunCommand" $3 $4 $5 $6
        if [ "$?" == "1" ]; then popd > /dev/null; return 1; fi

        RunCommand="pdflatex -interaction=scrollmode \"$2\""
        $RunCommand > /dev/null # Ignore errors, hope they go away
        do_this "$RunCommand" $3 $4 $5 $6
        if [ "$?" == "1" ]; then popd > /dev/null; return 1; fi

        popd > /dev/null
    else
        Err "Checking file $BuildDirectory/$2.$Extension" $3 $4 $5 $6
        return $?
    fi
    return 0
}
############################################################################################################
function sphinx_build {
    # $1 = Format
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = Temporary file
    # $5 = LogFile
    # $6 = Modified Arguments

    BuildDirectory="build/$1"

    echo "$6" | grep -i "/-e/" > /dev/null
    if [ $? == 1 ]; then
        delete_previous $BuildDirectory $2 $3 $4 $5
        if [ "$?" == "1" ]; then return 1; fi
    fi
    RunCommand="sphinx-build -b $1 source $BuildDirectory"
    do_this "$RunCommand" $2 $3 $4 $5
    return $?
}
############################################################################################################
function update_python {
    # $1 = AskThem
    # $2 = DisplayStatus
    # $3 = TempFile
    # $4 = LogFile

# Update the additional python documentation files
    which python2.7 > /dev/null
    if [ "$?" == "0" ]; then
        if [[ -f cmdgen.py ]]; then
            do_this "python2.7 cmdgen.py" $1 $2 $3 $4
            return $?
        else
            echo "The python script cmdgen.py seems to be missing."
            read -p "Abort? [Y/n] "
            if [ -z $UserResponse ];then
                UserResponse='y'
            fi
            if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
                return 1
            fi
        fi
    else
        echo "Python 2.7 seems to be missing."
        read -p "Abort? [Y/n] "
        if [ -z $UserResponse ];then
            UserResponse='y'
        fi
        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
            return 1
        fi
    fi
    return 0
}
############################################################################################################
function update_scala {
    # $1 = AskThem
    # $2 = DisplayStatus 
    # $3 = TempFile
    # $4 = LogFile

    # Update scala server
    which mvn > /dev/null
    if [ "$?" == "0" ]; then
#       RunCommand="mvn compile"
#       log_step "$RunCommand" $2 $4
#       $RunCommand > $3
#       if [ "$?" != "0" ]; then
#           Err "$RunCommand" $1 $2 $3 $4
#           if [ "$?" == "1" ]; then return 1; fi
            RunCommand="mvn clean install -DskipTests"
#           read -p "Try \"$RunCommand\"? [y|N]" UserResponse
#           if [ -z $UserResponse ];then
#               UserResponse='y'
#           fi
#           if [ ${UserResponse:0:1} == 'N' -o ${UserResponse:0:1} == 'n' ]; then
#               return 1
#           fi
            do_this "$RunCommand" $1 $2 $3 $4
            return $?
#       else
#           rm $3 > /dev/null
#       fi
    else
        Err "Maven does not appear to be installed." $1 $2 $3 $4
        if [ "$?" == "1" ]; then return 1; fi
    fi
    return 0
}
#==========================================================================================================#
main $(parameters "$*")

