Assign classes to vertices.

Randomly assign classes to vertices given a vector of percentages.
Each vertex receives an additional property that contains a random label.
The random label is generated by a probability distribution function.
The distribution function is specified by the sample_percentages, a list of
floating point values, which add up to 1.
The labels are non-negative integers drawn from the range
[ 0, len(sample_percentages) - 1].
Optionally, the user can specify a list of strings to be used as the labels.
If the number of labels is 3, the labels will default to "TR", "TE" and "VA".

Parameters
----------
sample_percentages : list of float
    Entries are non-negative and sum to 1.
    If the *i*'th entry of the  list is *p*,
    then then each row receives label *i* with independent probability *p*.

sample_labels : [ str | list of str ] (optional)
    Names to be used for the split classes.
    Defaults are "TR", "TE", "VA" (short for Train, Test, Verification) when
    the length of *sample_percentages* is 3, and defaults to Sample_0,
    Sample_1, ... otherwise.

output_property: str (optional)
    Name of the new property which holds the labels generated by the function.
    Defaults to "sample_bin".

random_seed : int (optional)
    Random seed used to generate the labels.
    Defaults to 0.

Examples
--------
Given *my_graph* is a Graph object accessing a graph with data:

.. only:: html

    ::

        my_graph = ia.get_graph('my_graph')
        my_graph.query.gremlin("g.V [0..2]")
        {u'results': [{u'_vid': 4, u'source': 3, u'_type': u'vertex', u'_id': 30208, u'_label': u'vertex'}, {u'_vid': 3, u'source': 2, u'_type': u'vertex', u'_id': 19992, u'_label': u'vertex'}, {u'_vid': 1, u'source': 1, u'_type': u'vertex', u'_id': 23384, u'_label': u'vertex'}], u'run_time_seconds': 2.165}

.. only:: latex

    ::

        my_graph = ia.get_graph('my_graph')
        my_graph.query.gremlin("g.V [0..2]")
        {u'results': 
          [{u'_vid': 4,
            u'source': 3,
            u'_type':
            u'vertex',
            u'_id': 30208,
            u'_label':
            u'vertex'},
           {u'_vid': 3,
            u'source': 2,
            u'_type':
            u'vertex',
            u'_id': 19992,
            u'_label':
            u'vertex'},
           {u'_vid': 1,
            u'source': 1,
            u'_type':
            u'vertex',
            u'_id': 23384,
            u'_label':
            u'vertex'}],
            u'run_time_seconds': 2.165}

Append a new property *sample_bin* to every vertex in the graph;
Assign the value in the new vertex property to "train", "test", or "validate"::

    my_graph.sampling.assign_sample([0.3, 0.3, 0.4], ["train", "test", "validate"])

Now the vertices of *my_graph* have a new vertex property named "sample_bin" and
each vertex contains one of the values "train", "test", or "validate".
Existing properties are unaffected.

.. only:: html

    ::

        my_graph.query.gremlin("g.V [0..2]")
        {u'results': [
        {u'_vid': 4, u'source': 3, u'_type': u'vertex', u'_id': 30208, u'_label': u'vertex', u'sample_bin': u'train'},
        {u'_vid': 3, u'source': 2, u'_type': u'vertex', u'_id': 19992, u'_label': u'vertex', u'sample_bin': u'test'},
        {u'_vid': 1, u'source': 1, u'_type': u'vertex', u'_id': 23384, u'_label': u'vertex', u'sample_bin': u'validate'}],
         u'run_time_seconds': 2.165}

.. only:: latex

    ::

        my_graph.query.gremlin("g.V [0..2]")
        {u'results': [
        {u'_vid': 4,
         u'source': 3,
         u'_type':
         u'vertex',
         u'_id': 30208,
         u'_label':
         u'vertex',
         u'sample_bin':
         u'train'},
        {u'_vid': 3,
         u'source': 2,
         u'_type':
         u'vertex',
         u'_id': 19992,
         u'_label':
         u'vertex',
         u'sample_bin':
         u'test'},
        {u'_vid': 1,
         u'source': 1,
         u'_type':
         u'vertex',
         u'_id': 23384,
         u'_label':
         u'vertex',
         u'sample_bin':
         u'validate'}],
         u'run_time_seconds': 2.165}

