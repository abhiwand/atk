#!/bin/bash

## The primary purpose of this script file is to allow the Sphinx-Build program
# to build in python 2.7 on a RedHat distribution of Linux. RedHat needs
# version 2.6 to run properly, so we create a virtual environment with
# python 2.7 in the PYTHONPATH when we create the documents.

# Running on Ubuntu, we don't need virtpy because Ubuntu is awesome!
UBUNTU_OS=$(cat /etc/*-release | grep -i ubuntu)

# Give the filename of the list of people with ability to load python packages
TECHWRITERS=techwriters

# Look for help
echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i -e "/-h/" -e "/--help/" -e "//////////" > /dev/null
if [ $? == 0 ]; then
    echo
    echo $0
    echo
    echo "-h, --help: Print this and exit"
    echo "-e:         Do not erase previous compilation"
    echo "+e:         Erase doctrees"
    if [ "$UBUNTU_OS" == "" ]; then
        echo "-f, --force:Attempt compile without virtual environment"
    fi
    echo "-s:         Do not compile Scala code"
    echo
    echo "html:       Compile to html"
    echo "latex:      Compile to LaTeX"
    echo "pdf:        Compile to pdf"
    echo "text:       Compile to text"
    echo "zip:        Do a zip of build directory"
    echo "packages:   Check for installed packages"
    echo
    echo "By default, file builds will erase previous files first. For example,"
    echo "if html is called for, this will delete the existing html files first."
    echo
fi

# This is stupid, but sometimes numpy chokes on these files.
if [[ -f ../core/*.pyc ]]; then
    rm ../core/*.pyc
fi

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
pushd $SCRIPTPATH > /dev/null


echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i -e "/-f/" -e "/--force/"> /dev/null
if [ $? == 1 ]; then
    if [ "$UBUNTU_OS" == "" ]; then
        # This is not Ubuntu, so look for a virtual environment
        if [[ -f /usr/lib/IntelAnalytics/virtpy/bin/activate ]]; then
            ACTIVATE_FILE=/usr/lib/IntelAnalytics/virtpy/bin/activate
        else
            ACTIVATE_FILE=/usr/local/virtpy/bin/activate
        fi

        if [[ -f $ACTIVATE_FILE ]]; then
            source $ACTIVATE_FILE > /dev/null
        else
            echo "Virtual Environment is not installed."
            echo "Please execute install_pyenv.sh to install."
            popd > /dev/null
            exit 1
        fi
    else
        USERNAME=$LOGNAME
    fi
    USERNAME=$LOGNAME
fi

# Look for packages if the individual is a techwriter
echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/packages/" > /dev/null
if [ $? == 0 ]; then
    # Yes for "packages", check for permissions
    if [ -f $SCRIPTPATH/$TECHWRITERS ]; then
        echo $USERNAME | grep -f $SCRIPTPATH/$TECHWRITERS > /dev/null
        if [ $? == 0 ]; then
            clear
            echo Checking the installed packages and insure they are complete.
            # The packages need superuser rights to install properly.
            sudo -E $SCRIPTPATH/install_packages.sh
            if [ $? == 0 ]; then
                exit 1
            fi
        fi
    fi
fi

# Look for buildable
echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i -e "/latex/" -e "/pdf/" -e "/txt/" -e "/html/" > /dev/null
if [ $? == 0 ]; then
     
    echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/+e/" > /dev/null
    if [ $? == 0 ]; then
        if [ -d build/doctrees ]; then
            rm -r build/doctrees
        fi
    fi
    echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/-s/" > /dev/null
    if [ $? == 1 ]; then
        pushd > /dev/null

        # Update scala server
        cd ..
        echo "Maven compile"
        mvn compile > /dev/null
        if [ $? == 1 ]; then
            echo "Maven compile failure"
            popd > /dev/null
            exit 1
        fi

        # Update the additional python documentation files
        cd python
        echo "Python cmdgen.py"
        python cmdgen.py > /dev/null
        if [ $? == 1 ]; then
            echo "Failure: python cmdgen.py"
            echo Trying the longer path.\n\n
            cd ..
            echo "Maven install clean"
            mvn install clean > /dev/null
            if [ $? != 0 ]; then
                echo "Failure: mvn install clean"
                popd > /dev/null
                exit 1
            fi
            cd python
            python cmdgen.py > /dev/null
            if [ $? != 0 ]; then
                echo "Failure: python cmdgen.py"
                popd > /dev/null
                exit 1
            fi
        fi

        # return to original directory to continue
        popd
    fi

    # Look for latex
    echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i -e "/latex/" -e "/pdf/" > /dev/null
    if [ $? == 0 ]; then
        echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/-e/" > /dev/null
        if [ $? == 1 ]; then
            if [[ -d build/latex ]]; then
                rm -r build/latex
            fi
        fi
        # Yes for "latex"
        make -B latex 2>&1 | grep -v -f toctreeWarnings
    fi

    # Look for text
    echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/text/" > /dev/null
    if [ $? == 0 ]; then
        echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/-e/" > /dev/null
        if [ $? == 1 ]; then
            if [[ -d build/text ]]; then
                rm -r build/text
            fi
        fi
        # Yes for "text"
        make -B text 2>&1 | grep -v -f toctreeWarnings
    fi

    # Look for html
    echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/html/" > /dev/null
    if [ $? == 0 ]; then
        echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i "/-e/" > /dev/null
        if [ $? == 1 ]; then
            if [[ -d build/html ]]; then
                rm -r build/html
            fi
        fi
        # Ignore all toctree warnings.
        make -B html 2>&1 | grep -v -f toctreeWarnings
        if [[ ! -d build/html/_downloads ]]; then
            mkdir build/html/_downloads
        fi
        if [[ -f build/latex/IntelAnalytics.pdf ]]; then
            cp build/latex/IntelAnalytics.pdf build/html/_downloads/
        fi
    fi

    # Look for pdf
    echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i -e "/pdf/" > /dev/null
    if [ $? == 0 ]; then
        # Yes for "latexpdf"
        if [[ -f build/latex/IntelAnalytics.tex ]]; then
            # python fix_latex.py
            # if [ "$?" == "0" ] ; then
                cd build/latex
                make
                cd ../..
                if [[ -f build/latex/IntelAnalytics.pdf ]]; then
                    if [[ -d build/html/_downloads ]]; then
                        cp build/latex/IntelAnalytics.pdf build/html/_downloads/
                    fi
                fi
            # fi
        fi
    fi
fi

echo "/$1/$2/$3/$4/$5/$6/$7/$8/$9/" | grep -i -e "/zip/" > /dev/null
if [ $? == 0 ]; then
    echo Zipping Results...
    zip -q -9 -r intel_analytics_docs build/*
fi

exit 0
