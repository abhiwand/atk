(function() {
    var po = document.createElement('script');
    po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/client.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(po, s);
    })();

var googleAuth;
$(window).load(function(){
    googleAuth = {
        apiKey:GOOGLEOAUTH.apiKey,
        scope: GOOGLEOAUTH.scope,
        clientId: GOOGLEOAUTH.clientId,
        loginButtonId:"googleLoginButton",
        handleClientLoad: function(){
            gapi.client.setApiKey(googleAuth.apiKey)
            googleAuth.checkAuth(googleAuth.handleAuthResultLogin)
        },
        checkAuth: function(callback) {
            gapi.auth.authorize({client_id: googleAuth.clientId, scope: googleAuth.scope, immediate: true}, callback);
        },
        handleAuthResultLogin: function(authResult) {
            var authorizeButton = document.getElementById(googleAuth.loginButtonId);
            if( authorizeButton != null && authorizeButton != undefined){
                if (authResult && !authResult.error) {
                    authorizeButton.onclick = googleAuth.makeApiCallLogin;//googleAuth.makeOauthApiCall(googleAuth.loginCallback);//this.makeApiCallLogin;
                } else {
                    authorizeButton.onclick = googleAuth.handleAuthClickLogin;//(googleAuth.makeApiCallLogin);//this.handleAuthClickLogin;
                }
            }
        },
        handleAuthResultRegister: function(authResult) {
            if (authResult && !authResult.error) {
                googleAuth.makeApiCallRegister();
            } else {
                googleAuth.handleAuthClickRegister();
            }
        },
        makeOauthApiCall: function(callback){
            gapi.client.load('oauth2', 'v2', function() {
                var request = gapi.client.oauth2.userinfo.get();
                request.execute(function(resp) {
                    callback(resp);
                });
            });
        },
        makeApiCallLogin: function() {
            googleAuth.makeOauthApiCall(googleAuth.loginCallback);
        },
        loginCallback: function(authResult){
            if(googleAuth.isValidApiResponse(authResult)){
                googleAuth.authAjax(authResult,null, "login")
            }else{
                showSignInError()
            }
        },
        makeApiCallRegister: function() {
            googleAuth.makeOauthApiCall(googleAuth.registerCallback)
        },
        registerCallback: function(authResult) {
            if(googleAuth.isValidApiResponse(authResult)){
                $("#registerAuthResult").attr("value", JSON.stringify(authResult))
                googleAuth.registerSubmit()
            }else{
                showSignInError()
            }
        },
        handleAuthClick: function(callback){
            gapi.auth.authorize({client_id: this.clientId, scope: this.scope, immediate: false}, callback);
            return false;
        },
        handleAuthClickLogin: function() {
            googleAuth.handleAuthClick(googleAuth.makeApiCallLogin);
            return false;
        },
        handleAuthClickRegister: function() {
            googleAuth.handleAuthClick(googleAuth.makeApiCallRegister)
            return false;
        },
        registerSubmit: function(){
            $("#registration-form").submit()
        },
        authRedirect: function(data){
            if(data != undefined && data.code != undefined && data.url != undefined){
                window.location.replace( window.location.protocol + "//" + window.location.host+ "/" + data.url)
            }
            return false;
        },
        authAjax: function(authResult, redirectUrl, url){
            console.log(authResult);
            var obj = {};
            //obj.auth = authResult;
            if (authResult['email']) {
                // Successfully authorized
                // Hide the sign-in button now that the user is authorized, for example:
                $.ajax
                ({
                    type: "POST",
                    //the url where you want to sent the userName and password to
                    url: url,
                    dataType: 'json',
                    contentType: "application/json",
                    //json object to sent to the authentication url
                    data: JSON.stringify(authResult),
                    //data: authResult,
                    success: function (data) {
                        if(data.code === "1003"){
                            messages.showApprovalPending();
                        } else if(data.code === "1004"){
                            messages.showRegistrationRequired();
                        }else{
                            googleAuth.authRedirect(data)
                        }

                    },
                    error: function(one, two){
                        console.log("error")
                        console.log(one)
                        console.log(two)
                    }
                })
            } else if (authResult['error']) {

            }
        },
        isValidApiResponse: function(resp){
            if(resp == undefined || resp == null){
                return false;
            }else{
                return true;
            }
        },
        isValidAuthResult: function(authResult){
            if(authResult == undefined || authResult.access_token == undefined || authResult.access_token === ""){
                return false;
            }else{
                return true;
            }
        }
    }

    googleAuth.handleClientLoad();
    $("#googleLoginButton").click(function(){
        googleAuth.checkAuth(googleAuth.handleAuthResultLogin)
    })


})

var showSignInError = function(){
    $("#loginError").removeClass("hidden");
}
