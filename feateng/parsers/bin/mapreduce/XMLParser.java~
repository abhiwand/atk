package mapreduce;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class XMLParser {
    public static class MyParserMapper1   extends
					      Mapper<LongWritable, Text, NullWritable, Text> {
	
	
	
	@Override
	    public void map(LongWritable key, Text value1,Context context)
	
	    throws IOException, InterruptedException {
	
	    String xmlString = value1.toString();
	              
	    SAXBuilder builder = new SAXBuilder();
	    Reader in = new StringReader(xmlString);
	    String value="";
	    try {
	            
		Document doc = builder.build(in);
		Element root = doc.getRootElement();
	            
		String tag1 =root.getChild("tag").getChild("tag1").getTextTrim() ;
	             
		String tag2 =root.getChild("tag").getChild("tag1").getChild("tag2").getTextTrim();
		value= tag1+ ","+tag2;
		context.write(NullWritable.get(), new Text(value));
	    } catch (JDOMException ex) {
		Logger.getLogger(XMLParser.MyParserMapper1.class.getName()).log(Level.SEVERE, null, ex);
	    } catch (IOException ex) {
		Logger.getLogger(XMLParser.MyParserMapper1.class.getName()).log(Level.SEVERE, null, ex);
	    }
	    
	}
	
    }
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
	try {
	    runJob(args[0], args[1]);

	} catch (IOException ex) {
	    Logger.getLogger(XMLParser.class.getName()).log(Level.SEVERE, null, ex);
	}

    }


    public static void runJob(String input,
			      String output ) throws IOException {

	Configuration conf = new Configuration();

	conf.set("xmlinput.start", "");
	conf.set("xmlinput.end", "");
	conf
	    .set(
		 "io.serializations",
		 "org.apache.hadoop.io.serializer.JavaSerialization,org.apache.hadoop.io.serializer.WritableSerialization");

	Job job = new Job(conf, "jobName");


	FileInputFormat.setInputPaths(job, input);
	job.setJarByClass(XMLParser.class);
	job.setMapperClass(XMLParser.MyParserMapper1.class);
	job.setNumReduceTasks(0);
	job.setInputFormatClass(XmlInputFormat.class);
	job.setOutputKeyClass(NullWritable.class);
	job.setOutputValueClass(Text.class);
	Path outPath = new Path(output);
	FileOutputFormat.setOutputPath(job, outPath);
	FileSystem dfs = FileSystem.get(outPath.toUri(), conf);
	if (dfs.exists(outPath)) {
	    dfs.delete(outPath, true);
	}


	try {

	    job.waitForCompletion(true);

	} catch (InterruptedException ex) {
	    Logger.getLogger(XMLParser.class.getName()).log(Level.SEVERE, null, ex);
	} catch (ClassNotFoundException ex) {
	    Logger.getLogger(XMLParser.class.getName()).log(Level.SEVERE, null, ex);
	}

    }

}
}

}
