#!/bin/bash

# The primary purpose of this script file is to allow the Sphinx-Build program
# to build in python 2.7 on a RedHat distribution of Linux.

# Subroutines:

#############################################################################################################
function build_docstubs() {
    # $1 = AskThem
    # $2 = DisplayStatus
    # $3 = TempFile
    # $4 = LogFile

    # debug: Update the additional python documentation files
    RunCommand="which python2.7"
    do_this "$RunCommand" $1 "No" $3 $4
    Return=$?
    if [ "$Return" != "0" ]; then return $Return; fi
    if [[ -f cmdgen.py ]]; then
        export INTELANALYTICS_AUTOCONNECT=1
        do_this "python2.7 cmdgen.py" $1 $2 $3 $4
        return $?
    else
        echo "The python script cmdgen.py seems to be missing."
        read -p "Abort? [Y/n] "
        if [ -z $UserResponse ];then
            UserResponse='y'
        fi
        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
            return 1
        fi
    fi
    return 0
}

###########################################################################################################
function compile_jars() {
    # $1 = AskThem
    # $2 = DisplayStatus 
    # $3 = TempFile
    # $4 = LogFile

    # debug: run maven
    which mvn > /dev/null
    if [ "$?" == "0" ]; then
        RunCommand="mvn install -DskipTests"
        do_this "$RunCommand" $1 $2 $3 $4
        return $?
    else
        Err "Maven does not appear to be installed." $1 $2 $3 $4
        if [ "$?" == "1" ]; then return 1; fi
    fi
    return 0
}

############################################################################################################
function delete_previous() {
    # $1 = Directory
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = Temporary file
    # $5 = LogFile

    # debug: function delete_previous
    CommandLine="rm -rf $1"
    if [ -d $1 ]; then
        log_step "$CommandLine" $3 $5
        $CommandLine > $4
        if [ "$?" == "1" ]; then
            Err "$CommandLine" $2 $3 $4 $5
            if [ "$?" == "1" ]; then
                return 1
            fi
        else
            rm $4
        fi
    fi
    return 0
}

############################################################################################################
function do_this() {
    # $1 = RunCommand
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = TempFile
    # $5 = LogFile

    # debug: function do_this
    log_step "$1" $3 $5
    ($1) > $4 2>&1
    if [ "$?" == "1" ]; then
        Err "$1" $2 $3 $4 $5
        return $?
    else
        rm $4 > /dev/null
    fi
    return 0
}

############################################################################################################
function doc_help() {
    # debug: function doc_help
    echo
    echo "$0 $1"
    echo
    echo "-h, --help: Print this and return"
    echo "-e:         Do not erase previous compilation"
    echo "+e:         Erase doctrees"
    echo "-q, -qq:    Quiet mode, use default values for prompts"
    echo "-s:         Do not compile Scala code"
    echo
    echo "html:       Compile to html"
    echo "latex:      Compile to LaTeX"
    echo "pdf:        Compile to pdf"
    echo "text:       Compile to text"
    echo "zip:        Do a zip of build directory"
    echo "doctest:    Test the code examples"
    echo "packages:   Check for installed packages"
    echo
    echo "By default, file builds will erase previous files first. For example,"
    echo "if html is called for, this will delete the existing html files first."
    echo "Flags and options listed above have ':' symbol for clarification purposes only,"
    echo "they are not part of the flag/option and should not be used on the command line."
    echo
    return 0
}

############################################################################################################
function Err() {
    # $1 = Failure description, usually the command line
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = TempFile
    # $5 = LogFile

    # debug: function Err
    if [[ -e "$4" ]]; then
        cat "$4" >> $5
        rm "$4"
    fi
    if [ "$3" == "Yes" ]; then
        echo "Failure: $1"
    fi
    if [ "$2" == "Yes" ]; then
        read -p "View .log file? [Y/n] " UserResponse
        if [ -z $UserResponse ];then
            UserResponse='y'
        fi
        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
            less $LogFile
        fi
        read -p "Abort? [Y/n] " UserResponse
        if [ -z $UserResponse ];then
            UserResponse='y'
        fi
        if [ ${UserResponse:0:1} == 'Y' -o ${UserResponse:0:1} == 'y' ]; then
            return 1
        fi
    else
        return 1
    fi
    return 0
}

############################################################################################################
function log_step() {
    # $1 = step description, usually the full command
    # $2 = DisplayStatus
    # $3 = LogFile

    # debug: function log_step
    if [ "$2" == "Yes" ]; then
        echo "$1"
    fi
    echo >> $3
    echo >> $3
    echo "$1" >> $3
    return 0
}

############################################################################################################
function main() {
    # debug: function main
    # debug: $1 = Modified Arguments

    echo

    ModifiedArguments=$1
    ScriptPath=$(dirname "$(readlink -f "$0")")
    LogFile=$ScriptPath/doc.log; if [ -e $LogFile ]; then rm $LogFile; fi
    TempFile=$ScriptPath/temp.txt; if [ -e $TempFile ]; then rm $TempFile; fi
    export INTELANALYTICS_AUTOCONNECT=1

    # debug: Start the log file
    echo "doc run", $(date +%Y%m%d.%H%M), $ModifiedArguments > $LogFile

    # debug: Sometimes numpy chokes on these files.
    if [[ -f ../python/intelanalytics/core/*.pyc ]]; then
        rm ../python/intelanalytics/core/*.pyc
    fi

    # debug: Check on quiet mode
    echo $ModifiedArguments | grep -i -e "/-q/" -e "/-qq/" > /dev/null
    if [ $? == 0 ]; then
        AskThem=No
    else
        AskThem=Yes
    fi

    # debug: Check on super quiet mode
    echo $ModifiedArguments | grep -i -e "/-qq/" > /dev/null
    if [ $? == 0 ]; then
         DisplayStatus=No
    else
         DisplayStatus=Yes
    fi

    # debug: Look for help
    echo $ModifiedArguments | grep -i -e "/-h/" -e "/--help/" > /dev/null
    if [ $? == 0 ]; then
        doc_help $ModifiedArguments
        return 0
    fi

    # debug: Look for packages if the individual is a techwriter
    echo $ModifiedArguments | grep -i "/packages/" > /dev/null
    if [[ "$?" == "0" && "$USERNAME" != "" ]]; then
        packages $USERNAME $ScriptPath
    fi

    # debug: Add latex to the argument list if pdf is called for
    echo $ModifiedArguments | grep -i -e "/pdf/" > /dev/null
    if [ "$?" == "0" ]; then
        echo $ModifiedArguments | grep -i -e "/latex/" > /dev/null
        if [ "$?" == "1" ]; then
            ModifiedArguments="$ModifiedArguments+/latex/"
        fi
    fi

    # debug: Look for buildable
    echo $ModifiedArguments | grep -i -e "/latex/" -e "/pdf/" -e "/text/" -e "/html/" > /dev/null
    if [ "$?" == "0" ]; then

        # debug: Remove previous doctrees
        echo $ModifiedArguments | grep -i "/+e/" > /dev/null
        if [ "$?" == "0" ]; then
            delete_previous "build/doctrees" $AskThem $DisplayStatus $TempFile $LogFile
            if [ "$?" == "1" ]; then return 1; fi
        fi

        # debug: Check for rebuilding the scala routines
        echo $ModifiedArguments | grep -i "/-s/" > /dev/null
        if [ "$?" == "1" ]; then
            # Update the scala and python cmdgen
            maven $AskThem $DisplayStatus $TempFile $LogFile
            if [ "$?" == "1" ]; then return 1; fi
        fi

        # debug: Start the server
        pushd ../ > /dev/null
        RunCommand="cp conf/examples/application.conf.build conf/application.conf"
        do_this "$RunCommand" $AskThem $DisplayStatus $TempFile $LogFile
        Return=$?
        if [ "$Return" != "0" ]; then return $Return; fi
        server_start $AskThem $DisplayStatus $TempFile $LogFile
        Return=$?
        popd > /dev/null
        if [ "$Return" != "0" ]; then return $Return; fi


        # debug: Update the additional python documentation files
        pushd ../python > /dev/null
        build_docstubs $AskThem $DisplayStatus $TempFile $LogFile
        Return=$?
        popd > /dev/null
        if [ "$Return" != "0" ]; then return $Return; fi

        # debug: Look for sphinx build types
        RunCommand="which sphinx-build"
        do_this "$RunCommand" $AskThem "No" $TempFile $LogFile
        if [ "$?" != "0" ]; then return 1; fi
        SphinxFormats="latex text html"
        SphinxFlag=OK
        for Format in $SphinxFormats
        do
            echo $ModifiedArguments | grep -i -e "/$Format/" > /dev/null
            if [ "$?" == "0" ]; then
                sphinx_build "$Format" $AskThem $DisplayStatus $TempFile $LogFile $ModifiedArguments
                if [ "$?" == "1" ]; then return 1; fi
            fi
        done

        # debug: Look for pdf building
        echo $ModifiedArguments | grep -i -e "/pdf/" > /dev/null
        if [ $? == 0 ]; then
            RunCommand="which pdflatex"
            do_this "$RunCommand" $AskThem "No" $TempFile $LogFile
            if [ "$?" != "0" ]; then return 1; fi
            pdf_build latex IntelAnalytics $AskThem $DisplayStatus $TempFile $LogFile
            if [ "$?" != "0" ]; then return 1; fi
            if [[ -f build/latex/IntelAnalytics.pdf && -d build/html/_downloads ]]; then
                let Count=6
                while [ $Count -gt 0 ]
                do
                    if [ -s build/latex/IntelAnalytics.pdf ]; then
                        let Count=-1
                    else
                        sleep 10s
                        let Count-=1
                    fi
                done
                if [ $Count -eq 0 ]; then
                    Err "PDF too short to copy" $AskThem $DisplayStatus $TempFile $LogFile
                    if [ "$?" != "0" ]; then
                        return 1
                    fi
                else
                    RunCommand="cp build/latex/IntelAnalytics.pdf build/html/_downloads/"
                    do_this "$RunCommand" $AskThem $DisplayStatus $TempFile $LogFile
                    if [ "$?" != "0" ]; then return 1; fi
                fi
            fi
        fi
    fi

    # debug: Test the examples
    echo $ModifiedArguments | grep -i -e "/test/" > /dev/null
    if [ $? == 0 ]; then
        export PYTHONPATH="$PYTHONPATH;../python"
        for File in $(ls -1a source/*.rst)
        do
            echo $File
        done
    fi

    # debug: Compress the results into a single file
    echo $ModifiedArguments | grep -i -e "/zip/" > /dev/null
    if [ $? == 0 ]; then
        RunCommand="which zip"
        do_this "$RunCommand" $AskThem "No" $TempFile $LogFile
        if [ "$?" == "0" ]; then
            if [[ -e intel_analytics_docs.zip ]]; then
                rm intel_analytics_docs.zip
            fi
            RunCommand="zip -q -9 -r intel_analytics_docs build"
            do_this "$RunCommand" $AskThem $DisplayStatus $TempFile $LogFile
        fi
    fi
    # debug: Delete doc file
    if [ -e doc.log ]; then
        rm doc.log
    fi
}

############################################################################################################
function maven() {
    # $1 = AskThem
    # $2 = DisplayStatus
    # $3 = Temporary file
    # $4 = LogFile

    # debug: Maven

    # debug: Stop the server
    server_stop $1 $2 $3 $4
    Return=$?
    if [ "$Return" != "0" ]; then return $Return; fi

    # debug: Compile jars
    pushd ../ > /dev/null
    compile_jars $1 $2 $3 $4
    Return=$?
    popd > /dev/null
    if [ "$Return" != "0" ]; then return $Return; fi

    return $Return

}

############################################################################################################
function packages() {
    # $1 = User id name
    # $2 = ScriptPath

    # debug: Give the filename of the list of people with ability to
    # debug: load python packages
    TECHWRITERS=techwriters
    # Yes for "packages", check for permissions
    if [ -f $2/$TECHWRITERS ]; then
        echo $1 | grep -f $2/$TECHWRITERS > /dev/null
        if [ $? == 0 ]; then
            echo Checking the installed packages.
            # The packages need superuser rights to install properly.
            sudo -E $2/install_packages.sh
        fi
    fi
    return 0
}

############################################################################################################
function parameters() {
    e=""
    for p in $1
    do
        e=$e"/"$p
    done
    if [ "$e" != "" ]; then e=$e"/"; fi
    echo "$e"
}

############################################################################################################
function pdf_build() {
    # $1 = Source Format
    # $2 = Source Document(s)
    # $3 = AskThem
    # $4 = DisplayStatus
    # $5 = Temporary file
    # $6 = LogFile

    # debug: Build a pdf from another source, currently limited to latex

    BuildDirectory="build/$1"
    Extension="tex"

    log_step "Checking file $BuildDirectory/$2.$Extension" $4 $6
    if [[ -f "$BuildDirectory/$2.$Extension" ]]; then
        pushd $BuildDirectory > /dev/null
        RunCommand="pdflatex -interaction=scrollmode \"$2.$Extension\""
        $RunCommand > /dev/null # Ignore errors, hope they go away
        $RunCommand > /dev/null # Ignore errors, hope they go away
        $RunCommand > /dev/null # Ignore errors, hope they go away

        RunCommand="makeindex -s python.ist $2.idx"
        do_this "$RunCommand" $3 $4 $5 $6
        if [ "$?" == "1" ]; then popd > /dev/null; return 1; fi

        RunCommand="pdflatex -interaction=scrollmode \"$2\""
        $RunCommand > /dev/null # Ignore errors, hope they go away
        do_this "$RunCommand" $3 $4 $5 $6
        if [ "$?" == "1" ]; then popd > /dev/null; return 1; fi

        popd > /dev/null
    else
        Err "Checking file $BuildDirectory/$2.$Extension" $3 $4 $5 $6
        return $?
    fi
    return 0
}

############################################################################################################
function server_start() {
    # $1 = AskThem
    # $2 = DisplayStatus
    # $3 = Temporary file
    # $4 = LogFile

    # debug: First, kill any existing server running
    server_stop $1 $2 $3 $4
    Return=$?
    if [ "$Return" != "0" ]; then return $Return; fi

    # debug: Start the server
    echo -n "Start server"
    log_step "nohup bin/api-server.sh" "No" $4
    nohup bin/api-server.sh < /dev/null > $3 2>&1 &
    Return=$?
    if [ "$Return" != "0" ]; then
        echo
        Err "Start server (nohup bin/api-server.sh)" $1 $2 $3 $4
        Return=$?
    else
        let "Duration = 10"
        until [[ $Duration -lt 0 ]]; do
            sleep 1
            echo -n "."
            let "Duration -= 1"
        done
        echo
    fi
    return $Return
}

############################################################################################################
function server_stop() {
    # $1 = AskThem
    # $2 = DisplayStatus
    # $3 = Temporary file
    # $4 = LogFile

    # debug: Stop the server
    let "LoopCounter = 24"
    until [[ $LoopCounter -le 0 ]]; do
        pid=$(ps aux 2>&1  | grep "java.*launcher/target/launcher.jar.*com.intel.intelanalytics.component.Boot" | grep -v "grep")
        if [ "$?" == "0" ]; then
            pid=$(echo $pid | head -n 1 |  awk '{print $2}')
            echo -n "Stop server $pid"
            kill $pid
            if [ $? != 0 ]; then
                echo
                Err "Stop server $pid" $1 $2 $3 $4
                Return=$?
                if [[ "$Return" != "0" ]]; then
                    return $Return
                fi
            fi
            let "Duration = 2"
            until [[ $Duration -le 0 ]]; do
                sleep 1
                echo -n "."
                let "Duration -= 1"
            done
            echo
            let "LoopCounter -= 1"
        else
            return 0;
        fi
    done
    Err "Unable to stop server."
    return $?
}

############################################################################################################
function sphinx_build() {
    # $1 = Format
    # $2 = AskThem
    # $3 = DisplayStatus
    # $4 = Temporary file
    # $5 = LogFile
    # $6 = Modified Arguments

    # debug: sphinx_build()

    BuildDirectory="build/$1"

    echo "$6" | grep -i "/-e/" > /dev/null
    if [ $? == 1 ]; then
        delete_previous $BuildDirectory $2 $3 $4 $5
        if [ "$?" == "1" ]; then return 1; fi
    fi
    RunCommand="sphinx-build -b $1 source $BuildDirectory"
    do_this "$RunCommand" $2 $3 $4 $5
    return $?
}

#==========================================================================================================#
main $(parameters "$*")
