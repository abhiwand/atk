//////////////////////////////////////////////////////////////////////////////
// INTEL CONFIDENTIAL
//
// Copyright 2015 Intel Corporation All Rights Reserved.
//
// The source code contained or described herein and all documents related to
// the source code (Material) are owned by Intel Corporation or its suppliers
// or licensors. Title to the Material remains with Intel Corporation or its
// suppliers and licensors. The Material may contain trade secrets and
// proprietary and confidential information of Intel Corporation and its
// suppliers and licensors, and is protected by worldwide copyright and trade
// secret laws and treaty provisions. No part of the Material may be used,
// copied, reproduced, modified, published, uploaded, posted, transmitted,
// distributed, or disclosed in any way without Intel's prior express written
// permission.
//
// No license under any patent, copyright, trade secret or other intellectual
// property right is granted to or conferred upon you by disclosure or
// delivery of the Materials, either expressly, by implication, inducement,
// estoppel or otherwise. Any license under such intellectual property rights
// must be express and approved by Intel in writing.
//////////////////////////////////////////////////////////////////////////////

package com.intel.intelanalytics.domain.model

import com.intel.intelanalytics.domain.{ Naming, HasId }
import com.intel.intelanalytics.engine.plugin.Invocation
import org.joda.time.DateTime
import spray.json.JsObject

/**
 *
 * @param id unique id auto-generated by the database
 * @param name name assigned by user, auto-assigned by system if user doesn't supply
 * @param modelType the type of the model eg: OLS, LogisticRegression
 * @param description description of the model (a good default might say what frame it came from)
 * @param statusId lifecycle status. For example, INIT (building), ACTIVE, DELETED (un-delete possible), DELETE_FINAL (no un-delete), INCOMPLETE (failed construction)
 * @param data the JsObject containing the trained model
 * @param createdOn date/time this record was created
 * @param modifiedOn date/time this record was last modified
 * @param createdByUserId user who created this row
 * @param modifiedByUserId user who last modified this row
 */

case class ModelEntity(id: Long,
                       name: Option[String],
                       modelType: String,
                       description: Option[String],
                       statusId: Long,
                       data: Option[JsObject] = None,
                       createdOn: DateTime,
                       modifiedOn: DateTime,
                       createdByUserId: Option[Long] = None,
                       modifiedByUserId: Option[Long] = None,
                       lastReadDate: DateTime = new DateTime) extends HasId {
  require(id >= 0, "id must be zero or greater")
  require(name != null, "name must not be null")
  require(name match {
    case Some(n) => n.trim.length > 0
    case _ => true
  },
    "if name is set it must not be empty or whitespace")
  require(modelType != null, "modelType must not be null")
  require(!modelType.isEmpty, "modelType must not be empty")
  //require(modelType.startsWith("model:"), "modelType must start with 'model:'")
  require(description != null, "description must not be null")
  require(data != null, "data must not be null")
  require(createdByUserId != null, "createdByUserId must not be null")
  require(modifiedByUserId != null, "modifiedByUserId must not be null")

  def entityType: String = {
    modelType
  }

  def uri: String = getReference().uri

  def getReference(): ModelReference = ModelReference(id)
}
